/*
避免编译:
#main{
  width:~'calc(300px-30px)';
}


#main{
  width:calc(300px-30px);
}

结构： ~' 值 '

变量拼串

在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes

.judge(@i) when(@i=1){
  @size:15px;
}
.judge(@i) when(@i>1){
  @size:16px;
}
.loopAnimation(@i) when (@i<16) {
  
  .circle:nth-child(@{i}){
      .judeg(@i);
      border-radius:@size @size 0 0;
      animation: ~"circle-@{i}" @duration infinite @ease;
      transition-delay:~"@{i}ms";
  }
  @keyframes ~"circle-@{i}" {
      // do something...
  }
  .loopAnimation(@i + 1);
}

*/

@btn-prefix-cls: ~'@{css-prefix}btn';
.@{btn-prefix-cls} {
  .btn();
  .btn-default();
  // 毗邻的第一个元素
  & > .itu-icon + span, & > span + .itu-icon{
    margin-left: 4px;
}
  // 阴影渐渐退去
  .active-btn-color(@primary-color);

  &-primary {
    .btn-primary();
  }
  &-dashed {
    .btn-dashed();
  }
  &-text {
    .btn-text();
  }
  &-success {
    .btn-color-type(@success-color);
  }
  &-info {
    .btn-color-type(@info-color);
  }
  &-warning {
    .btn-color-type(@warning-color);
  }
  &-error {
    .btn-color-type(@error-color);
  }
  &-ghost {
    color: #fff;
    background: transparent;
    &:hover {
      background: transparent;
    }
  }
  // 幽灵属性单独设置
  &-ghost&-primary {
    .btn-ghost-type(@primary-color);
  }
  &-ghost&-info {
    .btn-ghost-type(@info-color);
  }
  &-ghost&-success {
    .btn-ghost-type(@success-color);
  }
  &-ghost&-warning {
    .btn-ghost-type(@warning-color);
  }
  &-ghost&-error {
    .btn-ghost-type(@error-color);
  }
  // 幽灵属性下的disable
  &-ghost&-default[disabled],
  &-ghost&-dashed[disabled],
  &-ghost&-primary[disabled],
  &-ghost&-info[disabled],
  &-ghost&-success[disabled],
  &-ghost&-warning[disabled],
  &-ghost&-error[disabled] {
    .button-color(fade(#000, 25%), transparent, @btn-disable-border);
  }
  &-ghost&-text[disabled] {
    .button-color(fade(#000, 25%) , transparent , transparent);

  }
}
